#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
typedef struct Node {
    int val;
    struct Node* next;
} Node;

// Function to insert a new node at the nth position in a linked list
Node* insertAtNthPosition(Node* head, int p, int n) {
    // Create a new node
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->val = p;

    // Initialize a pointer to traverse the linked list
    Node* current = head;

    // Traverse the linked list to find the nth node
    int count = 1;
    while (current && count < n) {
        current = current->next;
        count++;
    }

    // Insert the new node at the nth position
    if (current) {
        newNode->next = current->next;
        current->next = newNode;
    } else {
        // If the linked list is empty or n is 1, insert at the beginning
        newNode->next = head;
        head = newNode;
    }

    return head;
}

// Function to print the linked list
void printList(Node* head) {
    while (head) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}

int main() {
    // Create a linked list: 1 -> 3 -> 2 -> 3 -> 4 -> 5
    Node* head = (Node*)malloc(sizeof(Node));
    head->val = 1;
    head->next = (Node*)malloc(sizeof(Node));
    head->next->val = 3;
    head->next->next = (Node*)malloc(sizeof(Node));
    head->next->next->val = 2;
    head->next->next->next = (Node*)malloc(sizeof(Node));
    head->next->next->next->val = 3;
    head->next->next->next->next = (Node*)malloc(sizeof(Node));
    head->next->next->next->next->val = 4;
    head->next->next->next->next->next = (Node*)malloc(sizeof(Node));
    head->next->next->next->next->next->val = 5;

    // Insert a new node at the nth position
    head = insertAtNthPosition(head, 0, 1);

    // Print the updated linked list
    printList(head);

    return 0;
}
